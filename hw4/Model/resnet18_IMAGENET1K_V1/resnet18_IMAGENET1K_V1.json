[
    {
        "name": "resnet18_IMAGENET1K_V1",
        "dataset_name": [
            "https://raw.githubusercontent.com/TacoXDD/homeworks/master/dataset/train/normal.npy",
            "https://raw.githubusercontent.com/TacoXDD/homeworks/master/dataset/train/pneumonia.npy"
        ],
        "train_losses": [
            0.162379193585366,
            0.08395533912349493,
            0.042518504150211814,
            0.03447913878713735,
            0.014414284075028263,
            0.007847710992646171,
            0.01859051956620533,
            0.021635218682786218,
            0.0973081785114482,
            0.03475376194808632,
            0.011214803065522574,
            0.0037669953328440895,
            0.006415142645564629,
            0.009983975570939947,
            0.011568210917630495,
            0.007212422886441345,
            0.01369049319953774,
            0.006432092387476587,
            0.0019978134953635165,
            0.0004447587291224409,
            0.0001245362768531777,
            9.332385165180313e-05,
            0.00011842213555837588,
            5.104050339468813e-05,
            5.263296505290782e-05,
            5.813008379391249e-05,
            3.838167739104392e-05,
            2.5518455323663148e-05,
            3.180013189648889e-05,
            2.2852670638258133e-05
        ],
        "val_losses": [
            0.11016107407900003,
            1.4568083159918808,
            0.04329202951339539,
            0.1637185342529287,
            0.0633364079051087,
            0.09305639154403113,
            0.03711419285704883,
            0.2990527094628375,
            0.09344203861501928,
            0.05947120888875081,
            0.08468161283851189,
            0.05336341493686912,
            0.04597092376542815,
            0.07450798673181243,
            0.04004581411628841,
            0.06001502459079907,
            0.37455459505058397,
            0.0545280235375965,
            0.03524791157682417,
            0.027375399700898785,
            0.02830962143742419,
            0.029881672688973664,
            0.031253841813500355,
            0.030745278775122224,
            0.029759485501437248,
            0.031343003949097274,
            0.03231654978879725,
            0.03148404342937283,
            0.03193913110558592,
            0.03086055891169683
        ],
        "train_accuracies": [
            93.5625,
            96.75,
            98.25,
            98.75,
            99.5625,
            99.8125,
            99.375,
            99.1875,
            96.6875,
            98.6875,
            99.6875,
            99.875,
            99.8125,
            99.75,
            99.5625,
            99.75,
            99.5625,
            99.875,
            99.9375,
            100.0,
            100.0,
            100.0,
            100.0,
            100.0,
            100.0,
            100.0,
            100.0,
            100.0,
            100.0,
            100.0
        ],
        "val_accuracies": [
            95.75,
            61.5,
            98.25,
            94.25,
            97.75,
            96.0,
            98.25,
            95.0,
            97.0,
            98.75,
            96.25,
            98.0,
            98.25,
            96.75,
            98.75,
            97.25,
            85.25,
            98.5,
            99.0,
            98.5,
            98.75,
            99.0,
            99.0,
            99.0,
            98.75,
            98.5,
            98.75,
            98.5,
            98.75,
            98.5
        ],
        "traning_times": [
            "2023-10-30 06:42:20.373510",
            "2023-10-30 06:42:26.816270",
            "2023-10-30 06:42:33.300916",
            "2023-10-30 06:42:39.474558",
            "2023-10-30 06:42:45.689865",
            "2023-10-30 06:42:51.875233",
            "2023-10-30 06:42:58.149661",
            "2023-10-30 06:43:04.396849",
            "2023-10-30 06:43:10.713616",
            "2023-10-30 06:43:17.151528",
            "2023-10-30 06:43:23.537525",
            "2023-10-30 06:43:29.851528",
            "2023-10-30 06:43:36.280270",
            "2023-10-30 06:43:42.747318",
            "2023-10-30 06:43:49.167963",
            "2023-10-30 06:43:55.542958",
            "2023-10-30 06:44:01.944211",
            "2023-10-30 06:44:08.323846",
            "2023-10-30 06:44:14.912701",
            "2023-10-30 06:44:21.335373",
            "2023-10-30 06:44:27.705009",
            "2023-10-30 06:44:34.125023",
            "2023-10-30 06:44:40.560238",
            "2023-10-30 06:44:47.001643",
            "2023-10-30 06:44:53.481339",
            "2023-10-30 06:44:59.976819",
            "2023-10-30 06:45:06.453221",
            "2023-10-30 06:45:13.012312",
            "2023-10-30 06:45:19.616565",
            "2023-10-30 06:45:26.165578"
        ],
        "model": "ResNet(\n  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n  (relu): ReLU(inplace=True)\n  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n  (layer1): Sequential(\n    (0): BasicBlock(\n      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (1): BasicBlock(\n      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    )\n  )\n  (layer2): Sequential(\n    (0): BasicBlock(\n      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (downsample): Sequential(\n        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)\n        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n    )\n    (1): BasicBlock(\n      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    )\n  )\n  (layer3): Sequential(\n    (0): BasicBlock(\n      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (downsample): Sequential(\n        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)\n        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n    )\n    (1): BasicBlock(\n      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    )\n  )\n  (layer4): Sequential(\n    (0): BasicBlock(\n      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (downsample): Sequential(\n        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\n        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n    )\n    (1): BasicBlock(\n      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    )\n  )\n  (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))\n  (fc): Linear(in_features=512, out_features=2, bias=True)\n)",
        "test_data": [
            "https://raw.githubusercontent.com/TacoXDD/homeworks/master/dataset/test/test_normal.npy",
            "https://raw.githubusercontent.com/TacoXDD/homeworks/master/dataset/test/test_pneumonia.npy"
        ],
        "test_avg_loss": 1.497456060702881,
        "test_accuracy": 76.75
    }
]