[
    {
        "name": "resnet18_IMAGENET1K_V1_freeze",
        "dataset_name": [
            "https://raw.githubusercontent.com/TacoXDD/homeworks/master/dataset/train/normal.npy",
            "https://raw.githubusercontent.com/TacoXDD/homeworks/master/dataset/train/pneumonia.npy"
        ],
        "train_losses": [
            0.43649309128522873,
            0.26877577632665633,
            0.21821268945932387,
            0.19086639642715453,
            0.17465482264757157,
            0.19032373085618018,
            0.1719434989988804,
            0.15316433250904082,
            0.14557844139635562,
            0.14102598085999488,
            0.1384112285077572,
            0.13862814620137215,
            0.11700421780347824,
            0.1292432862892747,
            0.12562460705637932,
            0.12279876660555601,
            0.11855160817503929,
            0.12214375153183937,
            0.12401277095079422,
            0.11066762581467629,
            0.12272034894675016,
            0.11492909707129001,
            0.10514241825789213,
            0.10357736537232995,
            0.11807717122137547,
            0.116393175534904,
            0.0980966717377305,
            0.1015245059132576,
            0.10830676477402448,
            0.09531936921179295
        ],
        "val_losses": [
            0.35868821006554824,
            0.2260691598057747,
            0.1910394665140372,
            0.19936017233591813,
            0.16371032481010145,
            0.16287693524589905,
            0.17112486064434052,
            0.14637591059391314,
            0.14293223476180664,
            0.13779899420646521,
            0.1357705254967396,
            0.15062274053119695,
            0.12772007630421564,
            0.13610834585359463,
            0.12458418940122311,
            0.12490209593222691,
            0.12870315161462015,
            0.12155515027160828,
            0.13295787716141114,
            0.11788405420688483,
            0.11669109360529827,
            0.11492359451949596,
            0.13234605038395295,
            0.11984293778928426,
            0.113210507023793,
            0.11586806722558461,
            0.11636588751123501,
            0.11259088966135795,
            0.11567054975491303,
            0.11983348973668538
        ],
        "train_accuracies": [
            79.5625,
            90.0625,
            91.9375,
            93.4375,
            94.25,
            92.1875,
            93.25,
            94.5625,
            95.0625,
            95.0,
            95.3125,
            95.0625,
            96.0625,
            95.4375,
            95.625,
            95.3125,
            95.6875,
            95.875,
            95.75,
            96.125,
            95.3125,
            95.5625,
            96.875,
            96.5625,
            95.625,
            95.875,
            96.8125,
            96.625,
            96.25,
            96.5
        ],
        "val_accuracies": [
            92.0,
            92.75,
            92.5,
            94.25,
            94.0,
            94.5,
            94.0,
            94.75,
            94.75,
            94.75,
            95.25,
            93.75,
            95.75,
            95.75,
            96.25,
            96.0,
            94.75,
            95.75,
            95.75,
            96.0,
            96.0,
            96.25,
            95.5,
            95.0,
            95.75,
            95.0,
            96.0,
            96.25,
            96.25,
            95.75
        ],
        "traning_times": [
            "2023-10-30 06:50:28.661830",
            "2023-10-30 06:50:31.475390",
            "2023-10-30 06:50:34.087508",
            "2023-10-30 06:50:36.824654",
            "2023-10-30 06:50:39.406221",
            "2023-10-30 06:50:42.240910",
            "2023-10-30 06:50:44.902184",
            "2023-10-30 06:50:47.695948",
            "2023-10-30 06:50:50.311693",
            "2023-10-30 06:50:53.058344",
            "2023-10-30 06:50:56.128695",
            "2023-10-30 06:50:58.812134",
            "2023-10-30 06:51:01.592203",
            "2023-10-30 06:51:04.200507",
            "2023-10-30 06:51:06.973418",
            "2023-10-30 06:51:09.594094",
            "2023-10-30 06:51:12.232173",
            "2023-10-30 06:51:14.860914",
            "2023-10-30 06:51:17.506481",
            "2023-10-30 06:51:20.097563",
            "2023-10-30 06:51:22.679488",
            "2023-10-30 06:51:25.299637",
            "2023-10-30 06:51:27.913415",
            "2023-10-30 06:51:30.514080",
            "2023-10-30 06:51:33.126693",
            "2023-10-30 06:51:35.743957",
            "2023-10-30 06:51:38.378534",
            "2023-10-30 06:51:41.008435",
            "2023-10-30 06:51:43.629476",
            "2023-10-30 06:51:46.243423"
        ],
        "model": "ResNet(\n  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n  (relu): ReLU(inplace=True)\n  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n  (layer1): Sequential(\n    (0): BasicBlock(\n      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (1): BasicBlock(\n      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    )\n  )\n  (layer2): Sequential(\n    (0): BasicBlock(\n      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (downsample): Sequential(\n        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)\n        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n    )\n    (1): BasicBlock(\n      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    )\n  )\n  (layer3): Sequential(\n    (0): BasicBlock(\n      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (downsample): Sequential(\n        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)\n        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n    )\n    (1): BasicBlock(\n      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    )\n  )\n  (layer4): Sequential(\n    (0): BasicBlock(\n      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (downsample): Sequential(\n        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\n        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n    )\n    (1): BasicBlock(\n      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    )\n  )\n  (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))\n  (fc): Linear(in_features=512, out_features=2, bias=True)\n)",
        "test_data": [
            "https://raw.githubusercontent.com/TacoXDD/homeworks/master/dataset/test/test_normal.npy",
            "https://raw.githubusercontent.com/TacoXDD/homeworks/master/dataset/test/test_pneumonia.npy"
        ],
        "test_avg_loss": 0.409200606151269,
        "test_accuracy": 84.25
    }
]