[
    {
        "name": "resnet18",
        "dataset_name": [
            "https://www.dropbox.com/scl/fi/30dlbblp7wytcvoy05col/report_train.npy?rlkey=jx100qoz5n1d654v2mi32i9aj&dl=1",
            "https://www.dropbox.com/scl/fi/oo6g1yqhbjm22wffeddgv/report_val.npy?rlkey=9rqe0rucjhrbzv3x7xbs5047z&dl=1"
        ],
        "train_losses": [
            0.6707113496959209,
            0.44385744016617534,
            0.3368824704550207,
            0.2854129891842604,
            0.2456735787447542,
            0.16075665280222892,
            0.2266363627044484,
            0.1337577070808038,
            0.16680367911467328,
            0.09176425358164124,
            0.12686168944346718,
            0.0505992746228003,
            0.10078599378466606,
            0.08148974543146323,
            0.17717813460039905,
            0.0460757126682438,
            0.08523844443552661,
            0.03920569925976451,
            0.050415575518854894,
            0.039413587724266105,
            0.041280183018170644,
            0.06586838413204532,
            0.040047491963923675,
            0.0705190006090561,
            0.04581155347368622,
            0.029939714571810327,
            0.021225878578752598,
            0.018610381998223603,
            0.02911640827260271,
            0.014739263982301054
        ],
        "val_losses": [
            0.6497309153997585,
            0.5343069455733425,
            0.3665320257607259,
            1.1767757628113031,
            0.45229141218097585,
            0.535605074543702,
            0.49876117078881516,
            0.5643422297251067,
            0.48425572894905744,
            0.31170370138811687,
            0.46833941771795873,
            0.4615258359852688,
            0.5127684341553648,
            0.5858695930556247,
            0.4643716295985015,
            0.39599060252504914,
            0.5381837484095932,
            0.6650211215019226,
            0.41509433169113963,
            0.441092472180332,
            0.6284430754420004,
            0.6311669314378187,
            0.4447662737465611,
            0.8361015029904114,
            0.4830433437355647,
            0.3318229359176353,
            0.3492972174579719,
            0.8759218905531605,
            0.41007934375911165,
            0.7017412716032643
        ],
        "train_accuracies": [
            77.37254901960785,
            84.03921568627452,
            88.62745098039215,
            89.84313725490196,
            90.94117647058823,
            93.92156862745098,
            91.76470588235294,
            95.25490196078431,
            94.3529411764706,
            96.54901960784314,
            95.92156862745098,
            98.11764705882354,
            96.62745098039215,
            97.37254901960785,
            94.58823529411765,
            98.58823529411765,
            97.56862745098039,
            98.54901960784314,
            98.03921568627452,
            98.3921568627451,
            98.58823529411765,
            97.88235294117646,
            98.70588235294117,
            97.88235294117646,
            98.3529411764706,
            99.2156862745098,
            99.2156862745098,
            99.49019607843137,
            98.82352941176471,
            99.49019607843137
        ],
        "val_accuracies": [
            72.83333333333333,
            81.33333333333333,
            86.66666666666667,
            67.0,
            85.5,
            84.66666666666667,
            82.83333333333333,
            81.16666666666667,
            85.66666666666667,
            90.33333333333333,
            83.16666666666667,
            87.0,
            85.33333333333333,
            80.83333333333333,
            85.33333333333333,
            88.0,
            84.0,
            83.0,
            86.33333333333333,
            88.0,
            84.33333333333333,
            83.83333333333333,
            89.0,
            84.16666666666667,
            87.66666666666667,
            91.5,
            90.0,
            78.66666666666667,
            90.0,
            83.83333333333333
        ],
        "traning_times": [
            "2023-12-03 07:21:56.595586",
            "2023-12-03 07:22:01.353929",
            "2023-12-03 07:22:06.226751",
            "2023-12-03 07:22:10.996543",
            "2023-12-03 07:22:15.996743",
            "2023-12-03 07:22:20.676557",
            "2023-12-03 07:22:25.461805",
            "2023-12-03 07:22:30.196205",
            "2023-12-03 07:22:34.912086",
            "2023-12-03 07:22:39.893492",
            "2023-12-03 07:22:44.730436",
            "2023-12-03 07:22:49.502777",
            "2023-12-03 07:22:54.321195",
            "2023-12-03 07:22:59.207962",
            "2023-12-03 07:23:04.022499",
            "2023-12-03 07:23:08.887284",
            "2023-12-03 07:23:13.832549",
            "2023-12-03 07:23:18.734565",
            "2023-12-03 07:23:23.628816",
            "2023-12-03 07:23:28.604118",
            "2023-12-03 07:23:33.517583",
            "2023-12-03 07:23:38.390319",
            "2023-12-03 07:23:43.338479",
            "2023-12-03 07:23:48.236125",
            "2023-12-03 07:23:53.084463",
            "2023-12-03 07:23:58.178765",
            "2023-12-03 07:24:03.215170",
            "2023-12-03 07:24:08.055112",
            "2023-12-03 07:24:12.938602",
            "2023-12-03 07:24:17.816651"
        ],
        "model": "ResNet(\n  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n  (relu): ReLU(inplace=True)\n  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n  (layer1): Sequential(\n    (0): BasicBlock(\n      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (1): BasicBlock(\n      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    )\n  )\n  (layer2): Sequential(\n    (0): BasicBlock(\n      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (downsample): Sequential(\n        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)\n        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n    )\n    (1): BasicBlock(\n      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    )\n  )\n  (layer3): Sequential(\n    (0): BasicBlock(\n      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (downsample): Sequential(\n        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)\n        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n    )\n    (1): BasicBlock(\n      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    )\n  )\n  (layer4): Sequential(\n    (0): BasicBlock(\n      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (downsample): Sequential(\n        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\n        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n    )\n    (1): BasicBlock(\n      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    )\n  )\n  (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))\n  (fc): Linear(in_features=512, out_features=6, bias=True)\n)",
        "test_data": [
            "https://raw.githubusercontent.com/TacoXDD/homeworks/master/dataset/test/test_normal.npy",
            "https://raw.githubusercontent.com/TacoXDD/homeworks/master/dataset/test/test_pneumonia.npy"
        ],
        "test_avg_loss": 25.950973018009837,
        "test_accuracy": 16.666666666666668
    }
]