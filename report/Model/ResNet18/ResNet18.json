[
    {
        "name": "ResNet18",
        "dataset_name": [
            "https://www.dropbox.com/scl/fi/30dlbblp7wytcvoy05col/report_train.npy?rlkey=jx100qoz5n1d654v2mi32i9aj&dl=1",
            "https://www.dropbox.com/scl/fi/oo6g1yqhbjm22wffeddgv/report_val.npy?rlkey=9rqe0rucjhrbzv3x7xbs5047z&dl=1"
        ],
        "train_losses": [
            0.5980622773990035,
            0.4083928009495139,
            0.3213412088807672,
            0.32562124319374564,
            0.21225673374719917,
            0.23674499318003656,
            0.27460207606200127,
            0.11049206941388548,
            0.080741319648223,
            0.13000140066142193,
            0.06196765072236303,
            0.05552113081357675,
            0.062199391426111104,
            0.08909065706975525,
            0.13918701569491532,
            0.09800440439139493,
            0.062255061572795964,
            0.02670643416495295,
            0.011110528202698334,
            0.02756678481673589,
            0.06751087912925868,
            0.04966053348252899,
            0.06434200525363849,
            0.09007906681217719,
            0.0584289601247292,
            0.08336611820559484,
            0.0684905556619924,
            0.03459602059374447,
            0.02493898616885417,
            0.01899856221752998
        ],
        "val_losses": [
            1.264842699821058,
            0.6691799574580631,
            0.7978476189861172,
            0.4631184889493804,
            0.7982500079210455,
            0.9988737022412304,
            0.5819499009521678,
            0.5637732529522557,
            0.4279695447338255,
            0.4742616109831847,
            0.2542932308830419,
            0.711868509163172,
            0.49883718318060827,
            1.0249242743379192,
            0.44253286915390116,
            0.44405212419989865,
            0.3867301086061879,
            0.33235963188896056,
            0.2502526443476151,
            0.4797230748318773,
            0.4784908789749208,
            0.41757367687004215,
            1.3582241174391176,
            0.24797548879245082,
            0.3427883575143489,
            0.608326201851014,
            0.3813483700291009,
            0.8196630168117975,
            0.3789541141473149,
            0.4234039020038357
        ],
        "train_accuracies": [
            79.76470588235294,
            85.68627450980392,
            88.3921568627451,
            86.90196078431373,
            92.0,
            91.72549019607843,
            91.52941176470588,
            95.96078431372548,
            97.41176470588235,
            95.6470588235294,
            97.80392156862744,
            98.0,
            97.96078431372548,
            97.05882352941177,
            95.56862745098039,
            97.17647058823529,
            98.19607843137256,
            99.25490196078431,
            99.52941176470588,
            98.94117647058823,
            97.76470588235294,
            98.3921568627451,
            97.96078431372548,
            97.6078431372549,
            98.27450980392157,
            97.37254901960785,
            97.76470588235294,
            98.7843137254902,
            99.25490196078431,
            99.17647058823529
        ],
        "val_accuracies": [
            73.16666666666667,
            80.66666666666667,
            75.5,
            82.83333333333333,
            76.5,
            75.66666666666667,
            86.0,
            80.83333333333333,
            89.16666666666667,
            85.83333333333333,
            91.0,
            81.33333333333333,
            87.83333333333333,
            78.0,
            85.83333333333333,
            87.83333333333333,
            87.66666666666667,
            90.5,
            93.16666666666667,
            87.16666666666667,
            86.16666666666667,
            87.16666666666667,
            72.83333333333333,
            91.5,
            88.66666666666667,
            83.66666666666667,
            87.5,
            82.66666666666667,
            89.66666666666667,
            86.83333333333333
        ],
        "traning_times": [
            "2023-11-19 08:02:36.017554",
            "2023-11-19 08:02:41.263583",
            "2023-11-19 08:02:46.420945",
            "2023-11-19 08:02:51.756833",
            "2023-11-19 08:02:56.887030",
            "2023-11-19 08:03:02.066663",
            "2023-11-19 08:03:07.437935",
            "2023-11-19 08:03:12.503827",
            "2023-11-19 08:03:17.776394",
            "2023-11-19 08:03:22.881749",
            "2023-11-19 08:03:28.102874",
            "2023-11-19 08:03:33.101267",
            "2023-11-19 08:03:38.206314",
            "2023-11-19 08:03:43.288811",
            "2023-11-19 08:03:48.299855",
            "2023-11-19 08:03:53.354243",
            "2023-11-19 08:03:58.455771",
            "2023-11-19 08:04:03.476885",
            "2023-11-19 08:04:08.735172",
            "2023-11-19 08:04:13.887584",
            "2023-11-19 08:04:18.948360",
            "2023-11-19 08:04:23.983953",
            "2023-11-19 08:04:29.089856",
            "2023-11-19 08:04:34.154512",
            "2023-11-19 08:04:39.191164",
            "2023-11-19 08:04:44.264506",
            "2023-11-19 08:04:49.365612",
            "2023-11-19 08:04:54.386866",
            "2023-11-19 08:04:59.438684",
            "2023-11-19 08:05:04.545170"
        ],
        "model": "ResNet(\n  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n  (relu): ReLU(inplace=True)\n  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n  (layer1): Sequential(\n    (0): BasicBlock(\n      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (1): BasicBlock(\n      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    )\n  )\n  (layer2): Sequential(\n    (0): BasicBlock(\n      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (downsample): Sequential(\n        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)\n        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n    )\n    (1): BasicBlock(\n      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    )\n  )\n  (layer3): Sequential(\n    (0): BasicBlock(\n      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (downsample): Sequential(\n        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)\n        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n    )\n    (1): BasicBlock(\n      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    )\n  )\n  (layer4): Sequential(\n    (0): BasicBlock(\n      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (downsample): Sequential(\n        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\n        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n    )\n    (1): BasicBlock(\n      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    )\n  )\n  (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))\n  (fc): Linear(in_features=512, out_features=6, bias=True)\n)",
        "test_data": [
            "https://raw.githubusercontent.com/TacoXDD/homeworks/master/dataset/test/test_normal.npy",
            "https://raw.githubusercontent.com/TacoXDD/homeworks/master/dataset/test/test_pneumonia.npy"
        ],
        "test_avg_loss": 0.307397635478992,
        "test_accuracy": 93.0
    }
]